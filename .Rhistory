#| code-fold: true
image(t(proteasome), col = colorpanel(100, "red", "blue"))
grep("ribosome", A$Gene.Name)
grep("ribosome", A$Protein.Name)
grep("ribosome", A$Protein.Name, value)
grep("ribosome", A$Protein.Name, value=T)
grep("Ribosome", A$Protein.Name, value=T)
grep("ibosome", A$Protein.Name, value=T)
#| code-fold: true
# get ribosome and ribosome-related proteins
ribosome <- quant_values[grep("ibosome", A$Protein.Name, value=T), ]
#| code-fold: true
# get ribosome and ribosome-related proteins
ribosome <- quant_values[grep("ibosome", A$Protein.Name), ]
image(t(ribosome), col = colorpanel(100, "red", "blue", "white"))
#| code-fold: true
# get ribosome and ribosome-related proteins
ribosome <- quant_values[grep("ibosome", A$Protein.Name), ]
levelplot(t(ribosome), col = colorpanel(100, "red", "blue", "white"))
#| code-fold: true
# get ribosome and ribosome-related proteins
ribosome <- quant_values[grep("ibosome", A$Protein.Name), ]
xyplot(t(ribosome), col = colorpanel(100, "red", "blue", "white"))
#| code-fold: true
library(lattice)
# get ribosome and ribosome-related proteins
ribosome <- quant_values[grep("ibosome", A$Protein.Name), ]
levelplot(t(ribosome), col = colorpanel(100, "red", "blue", "white"))
#| code-fold: true
# get ribosome and ribosome-related proteins
ribosome <- quant_values[grep("ibosome", A$Protein.Name), ]
heatmap(ribosome, scale="none", Rowv = NA, Colv = NA, col = colorpanel(100, "red", "blue", "white"), )
grep("RP", A$Gene.Name, value=T)
grep("RPS|RPL", A$Gene.Name, value=T)
grep("RPS|^RPL", A$Gene.Name, value=T)
grep("^RPS|^RPL", A$Gene.Name, value=T)
#| code-fold: true
# get ribosome and ribosome-related proteins
ribosome <- quant_values[grep("^RPS|^RPL", A$Gene.Name, value=T), ]
#| code-fold: true
# get ribosome and ribosome-related proteins
ribosome <- quant_values[grep("^RPS|^RPL", A$Gene.Name, value=T), ]
#| code-fold: true
# get ribosome and ribosome-related proteins
ribosome <- quant_values[grep("^RPS|^RPL", A$Gene.Name, value=T), ]
ribosome <- quant_values[grep("^RPS|^RPL", A$Gene.Name, value=T), ]
ribosome
grep("^RPS|^RPL", A$Gene.Name, value=T)
#| code-fold: true
# get ribosome and ribosome-related proteins
ribosome <- quant_values[grep("^RPS|^RPL", A$Gene.Name), ]
heatmap(ribosome, scale="none", Rowv = NA, Colv = NA,
col = colorpanel(100, "red", "blue", "white"), labRow=grep("^RPS|^RPL", A$Gene.Name, value=T))
#| code-fold: true
# get ribosome and ribosome-related proteins
ribosome <- quant_values[grep("^RPS|^RPL", A$Gene.Name), ]
heatmap(ribosome, scale="none", Colv = NA, cexRow=0.5,
col = colorpanel(100, "red", "blue", "white"), labRow=grep("^RPS|^RPL", A$Gene.Name, value=T))
# Create a vector of patient IDs
patient_id <- c("P1", "P2", "P3", "P4", "P5", "P6", "P7", "P8", "P9", "P10")
# Create a vector of blood pressure before treatment
bp_before <- c(140, 150, 160, 145, 155, 165, 135, 125, 130, 120)
# Create a vector of blood pressure after treatment
bp_after <- c(130, 140, 150, 135, 145, 155, 125, 115, 120, 110)
# Create a data frame with patient ID and blood pressure
bp_data <- data.frame(patient_id = patient_id,
bp_before = bp_before,
bp_after = bp_after)
mean(bp_data$bp_before)
mean(bp_data$bp_after)
plot(bp_data$bp_before, bp_data$bp_after)
# Create a vector of patient IDs
patient_id <- c("P1", "P2", "P3", "P4", "P5", "P6", "P7", "P8", "P9", "P10")
# Create a vector of blood pressure before treatment
bp_before <- c(140, 150, 160, 145, 155, 165, 135, 125, 130, 120)
# Create a vector of blood pressure after treatment
bp_after <- c(130, 140, 150, 135, 145, 155, 125, 115, 120, 110)
# Create a data frame with patient ID and blood pressure
bp_data <- data.frame(patient_id = patient_id,
bp_before = bp_before,
bp_after = bp_after)
# Create a vector of patient IDs
patient_id <- c("P1", "P2", "P3", "P4", "P5", "P6", "P7", "P8", "P9", "P10")
# Create a vector of blood pressure before treatment
bp_before <- c(140, 150, 160, 145, 155, 165, 135, 125, 130, 120)
# Create a vector of blood pressure after treatment
bp_after <- c(130, 140, 150, 135, 145, 155, 125, 115, 120, 110)
# Create a data frame with patient ID and blood pressure
bp_data <- data.frame(patient_id = patient_id,
bp_before = bp_before,
bp_after = bp_after)
plot(bp_data$bp_before, bp_data$bp_after)
# Create a vector of patient IDs
patient_id <- c("P1", "P2", "P3", "P4", "P5", "P6", "P7", "P8", "P9", "P10")
# Create a vector of blood pressure before treatment
bp_before <- c(140, 150, 160, 145, 155, 165, 135, 125, 130, 120)
# Create a vector of blood pressure after treatment
bp_after <- c(130, 140, 150, 135, 145, 155, 125, 115, 120, 110) * rnorm(10)
# Create a data frame with patient ID and blood pressure
bp_data <- data.frame(patient_id = patient_id,
bp_before = bp_before,
bp_after = bp_after)
plot(bp_data$bp_before, bp_data$bp_after)
# Create a vector of patient IDs
patient_id <- c("P1", "P2", "P3", "P4", "P5", "P6", "P7", "P8", "P9", "P10")
# Create a vector of blood pressure before treatment
bp_before <- c(140, 150, 160, 145, 155, 165, 135, 125, 130, 120)
# Create a vector of blood pressure after treatment
bp_after <- c(130, 140, 150, 135, 145, 155, 125, 115, 120, 110) + rnorm(10)
# Create a data frame with patient ID and blood pressure
bp_data <- data.frame(patient_id = patient_id,
bp_before = bp_before,
bp_after = bp_after)
plot(bp_data$bp_before, bp_data$bp_after)
IQR()
IQR
?IQR
# Create a vector of gene names
gene_name <- c("G1", "G2", "G3", "G4", "G5", "G6", "G7", "G8", "G9", "G10")
# Create a vector of gene expression levels in control condition
expr_control <- c(10, 15, 20, 25, 30, 35, 40, 45, 50, 55)
# Create a vector of gene expression levels in treatment condition
expr_treatment <- c(12, 18, 24, 30, 36, 42, 48, 54 ,60 ,66)
# Create a data frame with gene name and expression levels
gene_data <- data.frame(gene_name = gene_name,
expr_control = expr_control,
expr_treatment = expr_treatment)
# Set seed for random numbers to obtain the same results
set.seed(10)
# Create a vector of patient IDs
patient_id <- c("P1", "P2", "P3", "P4", "P5", "P6", "P7", "P8", "P9", "P10")
# Create a vector of blood pressure before treatment
bp_before <- c(140, 150, 160, 145, 155, 165, 135, 125, 130, 120)
# Create a vector of blood pressure after treatment
bp_after <- c(130, 140, 150, 135, 145, 155, 125, 115, 120, 110) + rnorm(10)
# Create a data frame with patient ID and blood pressure
bp_data <- data.frame(patient_id = patient_id,
bp_before = bp_before,
bp_after = bp_after)
# Set seed for random numbers to obtain the same results
set.seed(10)
# Create a vector of gene names
gene_name <- c("G1", "G2", "G3", "G4", "G5", "G6", "G7", "G8", "G9", "G10")
# Create a vector of gene expression levels in control condition
expr_healthy <- runif(10) * 10
# Create a vector of gene expression levels in treatment condition
expr_disease <- runif(10) * 10 + 2
# Create a data frame with gene name and expression levels
gene_data <- data.frame(gene_name = gene_name,
expr_control = expr_control,
expr_treatment = expr_treatment)
# Set seed for random numbers to obtain the same results
set.seed(10)
# Create a vector of gene names
gene_name <- c("G1", "G2", "G3", "G4", "G5", "G6", "G7", "G8", "G9", "G10")
# Create a vector of gene expression levels in control condition
expr_healthy <- runif(10) * 10
# Create a vector of gene expression levels in treatment condition
expr_disease <- runif(10) * 10 + 2
# Create a data frame with gene name and expression levels
gene_data <- data.frame(gene_name = gene_name,
expr_healthy = expr_healthy,
expr_disease = expr_disease)
boxplot(gene_data[, 2:3])
median(gene_data[,2])
median(gene_data[,3])
IQR(gene_data[,2])
IQR(gene_data[,3])
barplot(gene_data[,1:2])
gene_data
gene_data[,1:2]
barplot(gene_data[, 2:3])
gene_data[,2:#]
gene_data[,2:3]
gene_data[,2:3]
as.matrix(gene_data[,2:3])
barplot(as.matrix(gene_data[,2:3]))
barplot(t(gene_data[,2:3]))
barplot(t(gene_data[1,2:3]))
barplot((gene_data[1,2:3]))
barplot(as.matrix(gene_data[1,2:3]))
# Create a vector of BMI values
bmi <- c(22, 24, 26, 28, 30, 32, 34 ,36 ,38 ,40 ,42 ,44 ,46 ,48 ,50 ,52 ,54 ,56 ,58 ,60)
# Create a vector of blood glucose levels
glucose <- c(80, 85, 90, 95, 100, 105, 110, 115, 120, 125,
130,135 ,140 ,145 ,150 ,155 ,160 ,165 ,170 ,175)
# Create a data frame with BMI and glucose
bmi_data <- data.frame(bmi = bmi,
glucose = glucose)
plot(bmi_data$bmi, bmi_data$glucose)
# Create a vector of BMI values
bmi <- c(22, 24, 26, 28, 30, 32, 34 ,36 ,38 ,40 ,42 ,44 ,46 ,48 ,50 ,52 ,54 ,56 ,58 ,60)
# Create a vector of blood glucose levels
glucose <- c(83, 81, 89, 92, 100, 105, 110, 115, 120, 125,
129,137 ,138 ,143 ,151 ,153 ,165 ,168 ,167 ,170)
# Create a data frame with BMI and glucose
bmi_data <- data.frame(bmi = bmi,
glucose = glucose)
plot(bmi_data$bmi, bmi_data$glucose)
# Create a vector of BMI values
bmi <- c(22, 24, 26, 28, 30, 32, 34 ,36 ,38 ,40 ,42 ,44 ,46 ,48 ,50 ,52 ,54 ,56 ,58 ,60)
# Create a vector of blood glucose levels
glucose <- c(83, 81, 89, 92, 102, 107, 108, 113, 122, 126,
129,137 ,138 ,143 ,151 ,153 ,165 ,168 ,167 ,170)
# Create a data frame with BMI and glucose
bmi_data <- data.frame(bmi = bmi,
glucose = glucose)
plot(bmi_data$bmi, bmi_data$glucose)
model <- lm(glucose ~ bmi,data=bmi_data) # fit linear model
summary(model) # print model summary
plot(glucose ~ fitted(model),
xlab = "Predicted Glucose",
ylab = "Observed Glucose") # plot observed vs. predicted values
abline(a=0,b=1,col="red") # add line for perfect fit
source("~/.active-rstudio-document", echo=TRUE)
library(venneuler)
# create a data frame with the frequencies of each set and overlap
set_freq <- data.frame(SetA = 10, SetB = 20, SetC = 30, A_B = 5, A_C = 3, B_C = 8, A_B_C = 2)
# create the Venn diagram with the venneuler function
venn <- venneuler(set_freq)
options(java.home="/usr/lib/jvm/java-1.19.0-openjdk-amd64/")
library(venneuler)
# create a data frame with the frequencies of each set and overlap
set_freq <- data.frame(SetA = 10, SetB = 20, SetC = 30, A_B = 5, A_C = 3, B_C = 8, A_B_C = 2)
# create the Venn diagram with the venneuler function
venn <- venneuler(set_freq)
install.packages("venneuler")
install.packages("venneuler")
library(venneuler)
# create a data frame with the frequencies of each set and overlap
set_freq <- data.frame(SetA = 10, SetB = 20, SetC = 30, A_B = 5, A_C = 3, B_C = 8, A_B_C = 2)
# create the Venn diagram with the venneuler function
venn <- venneuler(set_freq)
library(venneuler)
# create a data frame with the frequencies of each set and overlap
set_freq <- data.frame(SetA = 10, SetB = 20, SetC = 30, A_B = 5, A_C = 3, B_C = 8, A_B_C = 2)
# create the Venn diagram with the venneuler function
venn <- venneuler(set_freq)
array
mm <- matri(sample(c(0,1),replace=T, 200), 10)
mm
mm <- matrix(sample(c(0,1),replace=T, 200), 10)
mm
matr1 <- mm
matr1[order(matr1[,2], matr1[,3]), ]
?eigen
# mathematical functions or output
sqrt(vec); cos(matr); print(dat)
traceback()
A <- rnorm(10)
sum(A)
class(A) <- "my"
sum.my <- function(obj) sum(obj)/2
sum(A)
class(A)
sum.my(A)
sum(A)
sum.my <- function(obj) sum(obj)
sum(A)
sum.my <- function(obj) sum(obj, na.rm=T)
sum(A)
sum.my <- function(obj) sum(c(obj), na.rm=T)
sum(A)
sum.my <- function(obj, na.rm=F) sum(c(obj), na.rm=T)
sum(A)
?useMethod
??useMethod
?outer
??renderDT
??comics
?prcomp
?princomp
??lda
?MASS::lda
shiny::runApp('devel/Bioinformatics/DataAnalysis/ShinyApps/OmicsQ')
runApp('devel/Bioinformatics/DataAnalysis/ShinyApps/PolySTest')
runApp('devel/Bioinformatics/DataAnalysis/ShinyApps/PolySTest')
runApp('devel/Bioinformatics/DataAnalysis/ShinyApps/PolySTest')
runApp('devel/Bioinformatics/DataAnalysis/ShinyApps/PolySTest')
getwd()
setwd("devel/Bioinformatics/DataAnalysis/ShinyApps/PolySTest/")
runApp()
runApp()
runApp()
runApp()
runApp()
condition <- c("A", "B", "C", "D")
expression <- c(10, 15, 8, 12)
barplot(expression, names.arg = condition, main = "Average Gene Expression", ylab = "Expression Level")
barplot(mean(expression), names.arg = condition, main = "Average Gene Expression", ylab = "Expression Level")
barplot(expression, main = "Average Gene Expression", ylab = "Expression Level")
plot(expression, names.arg = condition, main = "Average Gene Expression", ylab = "Expression Level")
matplot(expression, main = "Gene Expression", ylab = "Expression Level")
conditions <- c("Condition1", "Condition2")
geneA <- c(10, 15)
geneB <- c(8, 12)
data <- data.frame(conditions, geneA, geneB)
plot(data$conditions, data[, -1], type = "l", xlab = "Conditions", ylab = "Expression Level", main = "Gene Expression Comparison")
matplot(data$conditions, data[, -1], type = "l", xlab = "Conditions", ylab = "Expression Level",
)
matplot(data$conditions, data[, -1], type = "l", xlab = "Conditions", ylab = "Expression Level")
matplot(data$conditions, data[, 1], type = "l", xlab = "Conditions", ylab = "Expression Level")
matplot(data$conditions, data[, 2], type = "l", xlab = "Conditions", ylab = "Expression Level")
# Generate example data
data <- rnorm(1000, mean = 5, sd = 2)
# Create histogram
hist(data, breaks = 20, col = "skyblue", border = "white",
main = "Histogram of Biomedical Data",
xlab = "Value", ylab = "Frequency")
# Generate example data
data <- rnorm(1000, mean = 5, sd = 2)
# Create histogram
hist(data, breaks = 20, col = "skyblue", border = "white",
main = "Histogram of Biomedical Data",
xlab = "Value", ylab = "?")
# Generate example data
group1 <- rnorm(100, mean = 5, sd = 2)
group2 <- rnorm(100, mean = 7, sd = 1.5)
# Combine data into a list
data <- list(Group1 = group1, Group2 = group2)
# Create box plot
boxplot(data, col = c("skyblue", "lightgreen"),
main = "Box Plot of Biomedical Data",
xlab = "Group", ylab = "Value")
# Generate example data
group1 <- rnorm(100, mean = 5, sd = 2)
group2 <- rnorm(100, mean = 7, sd = 1.5)
# Combine data into a list
data <- list(Group1 = group1, Group2 = group2)
# Create box plot
boxplot(data, col = c("skyblue", "lightgreen"),
main = "Box Plot of Biomedical Data",
xlab = "Group", ylab = "Value")
# Generate example data
group1 <- rnorm(100, mean = 5, sd = 2)
group2 <- rnorm(100, mean = 7, sd = 1.5)
# Combine data into a list
data <- list(Group1 = group1, Group2 = group2)
# Create violin plot
library(ggplot2)
ggplot(data = NULL, aes(x = factor(c(rep("Group1", length(group1)), rep("Group2", length(group2)))))) +
geom_violin(fill = "skyblue", color = "white") +
geom_boxplot(width = 0.1, fill = "lightgreen", color = "black") +
labs(title = "Violin Plot of Biomedical Data", x = "Group", y = "Value") +
theme_bw()
# Generate example data
group1 <- rnorm(100, mean = 5, sd = 2)
group2 <- rnorm(100, mean = 7, sd = 1.5)
# Combine data into a list
data <- list(Group1 = group1, Group2 = group2)
# Create violin plot
library(ggplot2)
ggplot(data = NULL, aes(x = factor(c(rep("Group1", length(group1)), rep("Group2", length(group2)))), c(group1,group2))) +
geom_violin(fill = "skyblue", color = "white") +
geom_boxplot(width = 0.1, fill = "lightgreen", color = "black") +
labs(title = "Violin Plot of Biomedical Data", x = "Group", y = "Value") +
theme_bw()
# Generate example data
group1 <- rnorm(100, mean = 5, sd = 2)
group2 <- rnorm(100, mean = 7, sd = 1.5)
# Combine data into a list
data <- list(Group1 = group1, Group2 = group2)
# Create violin plot
library(ggplot2)
ggplot(data = NULL, aes(x = factor(c(rep("Group1", length(group1)), rep("Group2", length(group2)))), c(group1,group2))) +
geom_violin(fill = "skyblue", color = "white") +
labs(title = "Violin Plot of Biomedical Data", x = "Group", y = "Value") +
theme_bw()
# Generate example data
group1 <- rnorm(100, mean = 5, sd = 2)
group2 <- rnorm(100, mean = 7, sd = 1.5)
# Combine data into a list
data <- list(Group1 = group1, Group2 = group2)
# Create violin plot
library(ggplot2)
ggplot(data = NULL, aes(x = factor(c(rep("Group1", length(group1)), rep("Group2", length(group2)))), c(group1,group2))) +
geom_violin(fill = "skyblue", color = "white") +
geom_boxplot(width = 0.1, fill = "lightgreen", color = "black") +
labs(title = "Overlay of Violin and Box Plot of Biomedical Data", x = "Group", y = "Value") +
theme_bw()
# Create example sets
set1 <- c("A", "B", "C", "D")
set2 <- c("C", "D", "E", "F")
set3 <- c("D", "E", "F", "G")
# Create a Venn diagram
venn.plot <- venn.diagram(
x = list(Set1 = set1, Set2 = set2, Set3 = set3),
filename = NULL,
col = "skyblue",
fill = c("dodgerblue", "goldenrod1", "darkorange1"),
alpha = 0.5,
label.col = c("dodgerblue", "goldenrod1", "darkorange1"),
cex = 0.8
)
library(VennDiagram)
# Create example sets
set1 <- c("A", "B", "C", "D")
set2 <- c("C", "D", "E", "F")
set3 <- c("D", "E", "F", "G")
# Create a Venn diagram
venn.plot <- venn.diagram(
x = list(Set1 = set1, Set2 = set2, Set3 = set3),
filename = NULL,
col = "skyblue",
fill = c("dodgerblue", "goldenrod1", "darkorange1"),
alpha = 0.5,
label.col = c("dodgerblue", "goldenrod1", "darkorange1"),
cex = 0.8
)
# Create example sets
set1 <- c("A", "B", "C", "D")
set2 <- c("C", "D", "E", "F")
set3 <- c("D", "E", "F", "G")
# Create a Venn diagram
venn.plot <- venn.diagram(
x = list(Set1 = set1, Set2 = set2, Set3 = set3),
filename = NULL,
col = "skyblue",
fill = c("dodgerblue", "goldenrod1", "darkorange1"),
alpha = 0.5,
label.col = c("dodgerblue", "goldenrod1", "darkorange1"),
cex = 0.8
)
set1
set2
?venn.diagram
# Create example sets
set1 <- c("A", "B", "C", "D")
set2 <- c("C", "D", "E", "F")
set3 <- c("D", "E", "F", "G")
# Create a Venn diagram
venn.plot <- venn.diagram(
x = list(Set1 = set1, Set2 = set2, Set3 = set3),
filename = NULL,
col = "skyblue",
fill = c("dodgerblue", "goldenrod1", "darkorange1"),
alpha = 0.5,
label.col = list("dodgerblue", "goldenrod1", "darkorange1"),
cex = 0.8
)
# Create example sets
set1 <- c("A", "B", "C", "D")
set2 <- c("C", "D", "E", "F")
set3 <- c("D", "E", "F", "G")
# Create a Venn diagram
venn.plot <- venn.diagram(
x = list(Set1 = set1, Set2 = set2, Set3 = set3),
filename = NULL,
col = "skyblue",
fill = c("dodgerblue", "goldenrod1", "darkorange1"),
alpha = 0.5,
cex = 0.8
)
grid.draw(venn.plot)
dev.off()
# Create example sets
set1 <- c("A", "B", "C", "D")
set2 <- c("C", "D", "E", "F")
set3 <- c("D", "E", "F", "G")
# Create a Venn diagram
venn.plot <- venn.diagram(
x = list(Set1 = set1, Set2 = set2, Set3 = set3),
filename = NULL,
col = "skyblue",
fill = c("dodgerblue", "goldenrod1", "darkorange1"),
alpha = 0.5,
cex = 0.8
)
grid.draw(venn.plot)
# Load the package
library(eulerr)
# Create example sets
set1 <- c("A", "B", "C", "D")
set2 <- c("C", "D", "E", "F")
set3 <- c("D", "E", "F", "G")
# Create a list of sets
x <- list(Set1 = set1, Set2 = set2, Set3 = set3)
# Create an euler object
e <- euler(x)
# Display the diagram with custom colors and labels
plot(e,
fills = c("dodgerblue", "goldenrod1", "darkorange1"),
alpha = 0.5,
labels = list(col = c("dodgerblue", "goldenrod1", "darkorange1"), cex = 0.8)
)
# Install and load the ComplexHeatmap package
install.packages("ComplexHeatmap")
library(ComplexHeatmap)
library(gplots)
# Create example matrix data
matrix_data <- matrix(data = rnorm(100), nrow = 10)
# Create a heatmap
heatmap_plot <- heatmap.2(
matrix_data,
main = "Heatmap",
col = bluered(256),
scale = "none",
trace = "none",
dendrogram = "both"
)
library(gplots)
# Create example matrix data
matrix_data <- matrix(data = rnorm(100), nrow = 10)
# Create a heatmap
heatmap_plot <- heatmap.2(
matrix_data,
main = "Heatmap",
col = bluered(256),
scale = "none",
trace = "none",
dendrogram = "both"
)
