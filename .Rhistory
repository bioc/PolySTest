expect_message(plotExpression(liver_example,
compNames = c("FO.Rep._vs_HF.Rep", "FO.Rep._vs_HF.Rep",
"TTA.FO.Rep._vs_HF.Rep."
),
sel_prots = 1:10,
qlim = 0.05, fclim = c(-1, 1)),
regexp = "finished")
expect_message(plotExpression(liver_example,
compNames = c("FO.Rep._vs_HF.Rep", "FO.Rep._vs_HF.Rep",
"TTA.FO.Rep._vs_HF.Rep."
),
sel_prots = 5:20,
profiles_scale = FALSE,
qlim = 0.05, fclim = c(-2, 2)),
regexp = "finished")
})
test_that("plotExpression executes without error", {
data("liver_example")
# Test: Call plotVolcano with the mock data and check for errors or warnings
expect_message(suppressWarnings(plotExpression(liver_example,
compNames = c("FO.Rep._vs_HF.Rep", "FO.Rep._vs_HF.Rep",
"TTA.FO.Rep._vs_HF.Rep."
),
sel_prots = 1:10,
qlim = 0.05, fclim = c(-1, 1))),
regexp = "finished")
expect_message(suppressWarnings(plotExpression(liver_example,
compNames = c("FO.Rep._vs_HF.Rep", "FO.Rep._vs_HF.Rep",
"TTA.FO.Rep._vs_HF.Rep."
),
sel_prots = 5:20,
profiles_scale = FALSE,
qlim = 0.05, fclim = c(-2, 2))),
regexp = "finished")
})
usethis::use_test("plotUpset")
plotUpset(liver_example,
5, 3,
qlim = 0.05, fclim = c(-1, 1))
test_that("plotUpset executes without error", {
data("liver_example")
# Test: Call plotVolcano with the mock data and check for errors or warnings
expect_message(plotUpset(liver_example,
5, 3,
qlim = 0.05, fclim = c(-1, 1)),
regexp = "finished")
})
usethis::use_test(PlotRegNumber)
usethis::use_test("PlotRegNumber)
usethis::use_test("PlotRegNumber")
test_that("plotRegNumber runs without error", {
data(liver_example)
# Remove margins to avoid figure margins too large error
expect_message(plotPvalueDistr(fulldata = liver_example,
NumComps = 3),
regexp="finished")
})
devtools::build()
devtools::load_all()
test_that("plotRegNumber runs without error", {
data(liver_example)
# Remove margins to avoid figure margins too large error
expect_message(plotPvalueDistr(fulldata = liver_example,
NumComps = 3),
regexp="finished")
})
test_that("plotRegNumber runs without error", {
data(liver_example)
# Remove margins to avoid figure margins too large error
expect_message(plotRegNumber(fulldata = liver_example,
NumComps = 3),
regexp="finished")
})
devtools::build()
devtools::load_all()
test_that("plotRegNumber runs without error", {
data(liver_example)
# Remove margins to avoid figure margins too large error
expect_message(plotRegNumber(fulldata = liver_example,
NumComps = 3m),
test_that("plotRegNumber runs without error", {
data(liver_example)
# Remove margins to avoid figure margins too large error
expect_message(plotRegNumber(fulldata = liver_example,
NumComps = 3),
regexp="finished")
})
devtools::build()
devtools::load_all()
test_that("plotRegNumber runs without error", {
data(liver_example)
# Remove margins to avoid figure margins too large error
expect_message(plotRegNumber(fulldata = liver_example,
NumComps = 3m),
test_that("plotRegNumber runs without error", {
data(liver_example)
# Remove margins to avoid figure margins too large error
expect_message(plotRegNumber(fulldata = liver_example,
NumComps = 3),
regexp="finished")
})
devtools::load_all()
test_that("plotRegNumber runs without error", {
data(liver_example)
# Remove margins to avoid figure margins too large error
expect_message(plotRegNumber(fulldata = liver_example,
NumComps = 3),
regexp="finished")
})
plotRegNumber(fulldata = liver_example,
NumComps = 3)
devtools::load_all()
test_that("plotRegNumber runs without error", {
data(liver_example)
# Remove margins to avoid figure margins too large error
expect_message(plotRegNumber(fulldata = liver_example,
NumComps = 3),
regexp="finished")
})
usethis::use_test("plotHeatmaply")
test_that("plotHeatmaply handles inputs correctly", {
data("liver_example")
# Test: Call plotVolcano with the mock data and check for errors or warnings
expect_message(plotVolcano(liver_example,
3,
sel_prots = "all"),
regexp = "finished")
expect_message(plotVolcano(liver_example,
3,
sel_prots = 5:20,
heatmap_scale = "row"),
regexp = "finished")
})
test_that("plotHeatmaply handles inputs correctly", {
data("liver_example")
# Test: Call plotVolcano with the mock data and check for errors or warnings
expect_message(plotHeatmaply(liver_example,
3,
sel_prots = "all"),
regexp = "finished")
expect_message(plotHeatmaply(liver_example,
3,
sel_prots = 5:20,
heatmap_scale = "row"),
regexp = "finished")
})
?setProgress
devtools::load_all()
test_that("plotHeatmaply handles inputs correctly", {
data("liver_example")
# Test: Call plotVolcano with the mock data and check for errors or warnings
expect_message(plotHeatmaply(liver_example,
3,
sel_prots = "all"),
regexp = "finished")
expect_message(plotHeatmaply(liver_example,
3,
sel_prots = 5:20,
heatmap_scale = "row"),
regexp = "finished")
})
devtools::load_all()
test_that("plotHeatmaply handles inputs correctly", {
data("liver_example")
# Test: Call plotVolcano with the mock data and check for errors or warnings
expect_message(plotHeatmaply(liver_example,
3,
sel_prots = "all"),
regexp = "finished")
expect_message(plotHeatmaply(liver_example,
3,
sel_prots = 5:20,
heatmap_scale = "row"),
regexp = "finished")
})
devtools::load_all()
test_that("plotHeatmaply handles inputs correctly", {
data("liver_example")
# Test: Call plotVolcano with the mock data and check for errors or warnings
expect_message(plotHeatmaply(liver_example,
3,
sel_prots = "all"),
regexp = "finished")
expect_message(plotHeatmaply(liver_example,
3,
sel_prots = 5:20,
heatmap_scale = "row"),
regexp = "finished")
})
?heatmaply
plotHeatmaply(liver_example,
3,
sel_prots = "all")
devtools::load_all()
test_that("plotHeatmaply handles inputs correctly", {
data("liver_example")
# Test: Call plotVolcano with the mock data and check for errors or warnings
expect_message(plotHeatmaply(liver_example,
3,
sel_prots = "all"),
regexp = "finished")
expect_message(plotHeatmaply(liver_example,
3,
sel_prots = 5:20,
heatmap_scale = "row"),
regexp = "finished")
})
devtools::build()
devtools::check()
library(SummarizedExperiment)
test_that("plotRegNumber runs without error", {
data(liver_example)
# Remove margins to avoid figure margins too large error
expect_message(plotRegNumber(fulldata = liver_example,
NumComps = 3),
regexp="finished")
})
??heatmaply
devtools::check()''
devtools::build()
devtools::check()''
devtools::check()
devtools::check()
sessionInfo()
sort(sessionInfo())
sort(unlist(sessionInfo()))
sort(sessionInfo())
sort(sessionInfo()[[1]])
sort(sessionInfo()[[2]])
sort(sessionInfo()[[3]])
sort(sessionInfo()[[4]])
sort(sessionInfo()[[5]])
sort(sessionInfo()[[10]])
sort(sessionInfo()[[9]])
sort(sessionInfo()[[8]])
sort(sessionInfo()[[7]])
sort(sessionInfo()[[6]])
sort(sessionInfo()[[5]])
names(sessionInfo())
sort(sessionInfo()[[8]])
sort(sessionInfo()[[9]])
(sessionInfo()[[9]])
devtools::check()
library(UpSetR)
citation(UpSetR)
citation("UpSetR")
version(UpSetR)
devtools::check()
devtools::check()
devtools::check()
devtools::documentation()
devtools::document()
??metadata
metadata
showMwethods(metadata())
showMwethods(metadata)
showMethods(metadata)
SummarizedExperiment::metadata
SummarizedExperiment::`metadata<-`()
AnnotatedDataFrame
?AnnotatedDataFrame
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
test_that("plotUpset executes without error", {
data("liver_example")
# Test: Call plotVolcano with the mock data and check for errors or warnings
expect_message(plotUpset(liver_example,
5, 3,
qlim = 0.05, fclim = c(-1, 1)),
regexp = "finished")
})
library(UpSetR)
data("liver_example")
# Test: Call plotVolcano with the mock data and check for errors or warnings
expect_message(plotUpset(liver_example,
5, 3,
qlim = 0.05, fclim = c(-1, 1)),
regexp = "finished")
devtools::check()
devtools::check()
data("liver_example")
# Test: Call plotVolcano with the mock data and check for errors or warnings
expect_message(plotUpset(liver_example, 5, 3, qlim = 0.05, fclim = c(-1, 1)),
regexp = "finished")
library(UpSetR)
data("liver_example")
# Test: Call plotVolcano with the mock data and check for errors or warnings
expect_message(plotUpset(liver_example, 5, 3, qlim = 0.05, fclim = c(-1, 1)),
regexp = "finished")
devtools::build()
devtools::load_all()
devtools::check()''
devtools::check()
devtools::load_all()
devtools::load_all()
data("liver_example")
# Test: Call plotVolcano with the mock data and check for errors or warnings
expect_message(plotUpset(liver_example, 5, 3, qlim = 0.05, fclim = c(-1, 1)),
regexp = "finished")
test_that("plotUpset executes without error", {
data("liver_example")
# Test: Call plotVolcano with the mock data and check for errors or warnings
expect_message(plotUpset(liver_example, 5, 3, qlim = 0.05, fclim = c(-1, 1)),
regexp = "finished")
})
test_that("plotHeatmaply handles inputs correctly", {
data("liver_example")
# Test: Call plotVolcano with the mock data and check for errors or warnings
expect_message(plotHeatmaply(liver_example,
3,
sel_prots = "all"),
regexp = "finished")
expect_message(plotHeatmaply(liver_example,
3,
sel_prots = 5:20,
heatmap_scale = "row"),
regexp = "finished")
})
devtools::check()
devtools::check()
devtools::check()
??plotCI
plotCI
devtools::check()
devtools::check()
# package raw data file
filename <- system.file("extdata", "LiverAllProteins.csv", package = "PolySTest")
NumReps <- 3
NumCond <- 4
isPaired <- TRUE
## Read file
dat <- read.csv(filename, row.names=1, stringsAsFactors = F)
## Reduce to first 200
dat <- dat[1:200,]
sampleMetadata <- data.frame(Condition = rep(paste("Condition", 1:NumCond), NumReps),
Replicate = rep(1:NumReps, each=NumCond))
# Create the SummarizedExperiment object
fulldata <- SummarizedExperiment(assays = list(quant = dat),
colData = sampleMetadata)
# Adding metadata
metadata(fulldata) <- list(
NumReps = NumReps,
NumCond = NumCond
)
# Access the assay data
dat <- assay(fulldata, "quant")
# Normalize
dat <- t(t(dat) -
colMedians(as.matrix(dat), na.rm = TRUE))
# Update the assay data in 'fulldata'
assay(fulldata, "quant") <- dat
####### Defining conditions from names
fulldata <- update_conditions_with_lcs(fulldata)
conditions <- unique(colData(fulldata)$Condition)
####### Defining comparison for statistical tests
FullReg <- allComps <- NULL
allComps <- create_pairwise_comparisons(conditions, 2)
# Run paired tests
fulldata <- PolySTest_paired(fulldata, allComps)
DRFs <- rowData(fulldata)[,"q-values PolySTest HF.Rep. vs TTA.Rep."] < 0.01
names(rowData(fulldata))
DRFs <- rowData(fulldata)[,"FDR_PolySTest-HF.Rep._vs_TTA.Rep."] < 0.01
DRFs <- rowData(fulldata)[,"FDR_PolySTes_-HF.Rep._vs_TTA.Rep."] < 0.01
DRFs <- rowData(fulldata)[,"FDR_PolySTest_HF.Rep._vs_TTA.Rep."] < 0.01
expect_equal(sum(DRFs), 21)
expect_match(rownames(rowData(fulldata))[4], "A7VJC2")
# Run unpaired tests
fulldata <- PolySTest_unpaired(fulldata, allComps)
DRFs <- rowData(fulldata)[,"FDR_PolySTest_HF.Rep._vs_TTA.Rep."] < 0.01
expect_equal(sum(DRFs), 21)
expect_match(rownames(rowData(fulldata))[4], "A7VJC2")
devtools::check()
library(testthat)
library(SummarizedExperiment)
test_that("PolySTest_paired", {
# Setup mock SummarizedExperiment object
dataMatrix <- matrix(rnorm(1000), nrow = 100)
rownames(dataMatrix) <- paste("Gene", 1:100)
colData <- data.frame(Condition = rep(c("A", "B"), each = 5))
rowData <- data.frame(Gene = paste("Gene", 1:100))
fulldata <- SummarizedExperiment(assay = list(quant = dataMatrix),
colData = colData, rowData = rowData)
metadata(fulldata) <- list(NumCond = 2, NumReps = 5)
# Specifying comparisons
allComps <- matrix(c("A", "B"), ncol = 2, byrow = TRUE)
# Run function
results <- PolySTest_paired(fulldata, allComps)
# Check for added columns in rowData
expect_true(any(grepl("p-values", colnames(rowData(results)))))
expect_true(any(grepl("q-values", colnames(rowData(results)))))
expect_equal(sum(rowData(results)$'q-values PolySTest B vs A' < 0.01), 0 )
# Run with different setupt
results <- PolySTest_paired(fulldata, allComps, statTests = c("t_test", "limma"))
expect_true(any(grepl("q-values", colnames(rowData(results)))))
expect_equal(sum(rowData(results)$'q-values limma B vs A' < 0.01), 0 )
# Run with different setupt
results <- PolySTest_paired(fulldata, allComps, statTests = c("t_test", "limma", "rank_products"))
expect_true(any(grepl("q-values", colnames(rowData(results)))))
expect_equal(sum(rowData(results)$'q-values PolySTest B vs A' < 0.01), 0 )
})
test_that("PolySTest_paired", {
# Setup mock SummarizedExperiment object
dataMatrix <- matrix(rnorm(1000), nrow = 100)
rownames(dataMatrix) <- paste("Gene", 1:100)
colData <- data.frame(Condition = rep(c("A", "B"), each = 5))
rowData <- data.frame(Gene = paste("Gene", 1:100))
fulldata <- SummarizedExperiment(assay = list(quant = dataMatrix),
colData = colData, rowData = rowData)
metadata(fulldata) <- list(NumCond = 2, NumReps = 5)
# Specifying comparisons
allComps <- matrix(c("A", "B"), ncol = 2, byrow = TRUE)
# Run function
results <- PolySTest_paired(fulldata, allComps)
# Check for added columns in rowData
expect_true(any(grepl("p-values", colnames(rowData(results)))))
expect_true(any(grepl("q-values", colnames(rowData(results)))))
expect_equal(sum(rowData(results)$'FDR_PolySTest_B_vs_A' < 0.01), 0 )
# Run with different setupt
results <- PolySTest_paired(fulldata, allComps, statTests = c("t_test", "limma"))
expect_true(any(grepl("q-values", colnames(rowData(results)))))
expect_equal(sum(rowData(results)$'q-values limma B vs A' < 0.01), 0 )
# Run with different setupt
results <- PolySTest_paired(fulldata, allComps, statTests = c("t_test", "limma", "rank_products"))
expect_true(any(grepl("q-values", colnames(rowData(results)))))
expect_equal(sum(rowData(results)$'q-values PolySTest B vs A' < 0.01), 0 )
})
library(testthat)
library(SummarizedExperiment)
test_that("PolySTest_paired", {
# Setup mock SummarizedExperiment object
dataMatrix <- matrix(rnorm(1000), nrow = 100)
rownames(dataMatrix) <- paste("Gene", 1:100)
colData <- data.frame(Condition = rep(c("A", "B"), each = 5))
rowData <- data.frame(Gene = paste("Gene", 1:100))
fulldata <- SummarizedExperiment(assay = list(quant = dataMatrix),
colData = colData, rowData = rowData)
metadata(fulldata) <- list(NumCond = 2, NumReps = 5)
# Specifying comparisons
allComps <- matrix(c("A", "B"), ncol = 2, byrow = TRUE)
# Run function
results <- PolySTest_paired(fulldata, allComps)
# Check for added columns in rowData
expect_true(any(grepl("p_values", colnames(rowData(results)))))
expect_true(any(grepl("FDR", colnames(rowData(results)))))
expect_equal(sum(rowData(results)$'FDR_PolySTest_B_vs_A' < 0.01), 0 )
# Run with different setupt
results <- PolySTest_paired(fulldata, allComps, statTests = c("t_test", "limma"))
expect_true(any(grepl("FDR", colnames(rowData(results)))))
expect_equal(sum(rowData(results)$'FDR_limma_B_vs_A' < 0.01), 0 )
# Run with different setupt
results <- PolySTest_paired(fulldata, allComps, statTests = c("t_test", "limma", "rank_products"))
expect_true(any(grepl("FDR", colnames(rowData(results)))))
expect_equal(sum(rowData(results)$'FDR_PolySTest_B_vs_A' < 0.01), 0 )
})
library(testthat)
library(SummarizedExperiment)
test_that("PolySTest_unpaired", {
# Setup mock SummarizedExperiment object
dataMatrix <- matrix(rnorm(1000), nrow = 100)
colData <- DataFrame(Condition = rep(c("A", "B"), each = 5))
rowData <- DataFrame(Gene = paste("Gene", 1:100))
fulldata <- SummarizedExperiment(assay = list(quant = dataMatrix),
colData = colData, rowData = rowData)
metadata(fulldata) <- list(NumCond = 2, NumReps = 5)
# Specifying comparisons
allComps <- matrix(c("A", "B"), ncol = 2, byrow = TRUE)
# Run function
results <- PolySTest_unpaired(fulldata, allComps)
# Check for added columns in rowData
expect_true(any(grepl("p_values", colnames(rowData(results)))))
expect_true(any(grepl("FDR", colnames(rowData(results)))))
expect_equal(sum(rowData(results)$'FDR_PolySTest_B_vs_A' < 0.01), 0 )
# Run with different setupt
results <- PolySTest_unpaired(fulldata, allComps, statTests = c("t_test", "limma"))
expect_true(any(grepl("FDR", colnames(rowData(results)))))
expect_equal(sum(rowData(results)$'FDR_limma_B_vs_A' < 0.01, na.rm=T), 0 )
# Run with different setupt
results <- PolySTest_unpaired(fulldata, allComps, statTests = c("t_test", "limma", "rank_products"))
expect_true(any(grepl("FDR", colnames(rowData(results)))))
expect_equal(sum(rowData(results)$'FDR_PolySTest_B_vs_A' < 0.01), 0 )
})
devtools::check()
devtools::check()
?redblue
devtools::check()
usethis::use_data("liver_example")
usethis::use_data(liver_example)
devtools::build()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
usethis::use_test("prepare_output_data")
in_test <- matrix(rnorm(10000*10),ncol=10)
NumReps <- 10
NumCond <- 2
res_misstest <- MissingStats(in_test, NumCond, NumReps)
in_test <- matrix(rnorm(10000*10),ncol=10)
NumReps <- 5
NumCond <- 2
res_misstest <- MissingStats(in_test, NumCond, NumReps)
head(res_misstest)
names(res_misstest)
liver_example
names(rowData(liver_example))
3+2+1
devtools::check()
?system.file
devtools::check()
