CombinedScores<-merge(CombinedScores,Data,by.x=1,by.y=0)
rownames(CombinedScores)<-CombinedScores[,1]
CombinedScores<-CombinedScores[,2:(dim(CombinedScores)[2])]
cfile <- paste(Experiment,"ClustC",fcmpars[2],".csv",sep="")
wrt <- NULL
CombinedScores[is.na(CombinedScores$cluster),1]<-0
for(cluster in c(1:(fcmpars[2]),0)) {
wrt <- CombinedScores[CombinedScores$cluster==cluster,]
colnames(wrt)[1]<-"cluster"
if (cluster == 1) {
write.table(wrt,file=cfile,sep=",")
} else {
write.table(wrt,file=cfile,append=TRUE,col.names=FALSE,sep=",")
}
}
save(Bestcl,file="Bestcl.rdata")
## Number, numbers, numbers
# regulated Proteins in 2 or 3 replicates
table(rowSums(!is.na(Proteins[rownames(WhereReg[rowSums(WhereReg)>0,]),])))
# regulated normalized phospho-peptides with 2 or three measurements
table(rowSums(!is.na(AcetProtNormed[rownames(WhereRegMods[rowSums(WhereRegMods)>0,]),])))
# number of phospho-proteins
tt<-rowSums(!is.na(AcetProtNormed[rownames(WhereRegMods[rowSums(WhereRegMods)>0,]),]))==18
length(unique(Acet[names(tt[tt]),19]))
Experiment <- "Arthur"
#####
## New data: Results...
## Problems: One file, no localization scores. What is the aim? Proteins of modifications (acetyled N-terminals + deamidations)???
library(matrixStats)
library(gplots)
library(readxl)
library(GOsummaries)
library(biomaRt)
library(miscTools)
library(stringr)
setwd("/home/veit/devel/Proteomics/DataAnalysis/PsychoArthur/")
source("../VRollup.R")
# pdf("All.pdf")
## Try removing everything below 8
## lower phosphoRS score to 0.9
Experiment <- "Arthur"
NumReps<-3
NumCond<-4
LOWESS<-F
# median-normalize again on protein level
normProts <- F
# median-normalize again on modified peptide level
normMods <- F
qlim<-0.05
phosphoRS <- 0.99
# Intensities below the treshold will be set to NA
IntThresh <- 0
## particular setup for statistical tests
Against <- c(1,1,1,2,2,3)
NumComp <- length(Against)
RR<-c(2,3,4,3,4,4)
# sel_columns <- c("Sequence","Protein.Group.Accessions","Modifications","phosphoRS.Isoform.Probability",
# "Quan.Info", paste("X",114:117,sep=""))
sel_columns <- c("Annotated Sequence","Master Protein Accessions","Modifications","phosphoRS.Isoform.Probability",
"Abundance: F1: 114, Control","Abundance: F1: 115, Sample","Abundance: F1: 116, Sample","Abundance: F1: 117, Sample")
Data<-NULL
ModData<-NULL
ProtData<-NULL
PepData<-NULL
# normalization, rollup, setting all non-acetylated peptide sequences to upper case
par(mfrow=c(3,4))
for (i in 1:NumReps) {
# unmod
File_In <- File_In2 <- File_In3 <- NULL
filename <- paste("Arthur_iTRAQ_",LETTERS[i],".xlsx",sep="")
if (file.exists(filename)) {
# File_In <- read.csv(filename,sep="\t",stringsAsFactors = F)
File_In <- read_xlsx(filename)
Pos_RR <- which(names(File_In) %in% sel_columns)
File_In <- File_In[,Pos_RR]
# if column available, filter for pRS
if (!is.null(File_In$"phosphoRS Isoform Probability")) {
File_In$`phosphoRS Isoform Probability`[is.na(File_In$`phosphoRS Isoform Probability`)] <- 1
File_In <- File_In[File_In$"phosphoRS Isoform Probability" > phosphoRS,colnames(File_In) != "phosphoRS Isoform Probability"]
}
# if column available, filter for Unique
if (!is.null(File_In$"Quan.Info")) {
File_In <- File_In[File_In$"Quan.Info" == "Unique",colnames(File_In) != "Quan.Info"]
}
File_In <- unique(File_In)
# File_In[,1]<-toupper(File_In[,1])
tDat <- sapply(File_In[,4:(ncol(File_In))],as.numeric)
tDat<-as.matrix(log2(tDat))
tDat[tDat < IntThresh] <- NA
tDat<- t(t(tDat)-apply(tDat,2,median,na.rm=T))
boxplot(tDat)
File_In[,4:ncol(File_In)]<-tDat
} else {
print(paste("No",filename))
}
# phospho
filename <- paste("Art_iTRAQ_Fosfo",i,".xlsx",sep="")
if (file.exists(filename)) {
File_In2 <- as.data.frame(read_excel(filename))
Pos_RR <- which(names(File_In2) %in% sel_columns)
# Pos_RR <- c(Pos_RR,Pos_RR[5]+1:(NumCond-1))
File_In2 <- File_In2[,Pos_RR]
# if column available, filter for pRS
# if column available, filter for Unique
if (!is.null(File_In2$"Quan Info")) {
File_In2 <- File_In2[File_In2$"Quan Info" == "Unique",colnames(File_In2) != "Quan Info"]
}
if (!is.null(File_In2$"phosphoRS Isoform Probability")) {
File_In2$`phosphoRS Isoform Probability`[is.na(File_In2$`phosphoRS Isoform Probability`)] <- 1
File_In2 <- File_In2[File_In2$"phosphoRS Isoform Probability" > phosphoRS,colnames(File_In2) != "phosphoRS Isoform Probability"]
}
File_In2 <- unique(File_In2)
# File_In2[,1]<-toupper(File_In2[,1])
tDat <- sapply(File_In2[,4:(ncol(File_In2))],as.numeric)
tDat<-as.matrix(log2(tDat))
tDat[tDat < IntThresh] <- NA
tDat<- t(t(tDat)-apply(tDat,2,median,na.rm=T))
boxplot(tDat)
File_In2[,4:ncol(File_In2)]<-tDat
} else {
print(paste("No",filename))
}
# glyco
filename <- paste(Experiment,"/",Experiment," rep.",i," - GLYCO_august2015_peptides.xlsx",sep="")
if (file.exists(filename)) {
File_In3 <- read_excel(filename)
Pos_RR <- which(names(File_In3) %in% sel_columns)
# Pos_RR <- c(Pos_RR,Pos_RR[5]+1:(NumCond-1))
File_In3 <- File_In3[,Pos_RR]
# if column available, filter for pRS
if (!is.null(File_In3$"phosphoRS Isoform Probability")) {
File_In3$`phosphoRS Isoform Probability`[is.na(File_In3$`phosphoRS Isoform Probability`)] <- 1
File_In3 <- File_In3[File_In3$"phosphoRS Isoform Probability" > phosphoRS,colnames(File_In3) != "phosphoRS Isoform Probability"]
}
# if column available, filter for Unique
if (!is.null(File_In3$"Quan Info")) {
File_In3 <- File_In3[File_In3$"Quan Info" == "Unique",colnames(File_In3) != "Quan Info"]
}
File_In3 <- unique(File_In3)
File_In3[,1]<-toupper(File_In3[,1])
tDat <- sapply(File_In3[,4:(ncol(File_In3))],as.numeric)
tDat<-as.matrix(log2(tDat))
tDat[tDat < IntThresh] <- NA
tDat<- t(t(tDat)-apply(tDat,2,median,na.rm=T))
boxplot(tDat)
File_In3[,4:ncol(File_In3)]<-tDat
} else {
print(paste("No",filename))
}
DatAcet<-rbind(File_In,File_In2,File_In3)
DatAcet <- as.data.frame(DatAcet)
DatAcet$Modifications <- unlist(DatAcet$Modifications)
#Change sequence annotation (remove terminals)
DatAcet[,1] <-str_extract(DatAcet[,1],"[A-Z]{2,}")
# Filter out oxidations
PTMs_to_delete <- -grep("Oxidation",DatAcet$`Modifications`)
# DatAcet <- DatAcet[-grep("Oxidation",DatAcet$Modifications),]
if (length(PTMs_to_delete) > 0)
DatAcet <- DatAcet[-grep("Oxidation",DatAcet$`Modifications`),]
# tList<-str_extract_all(paste(str_extract_all(DatAcet[,3],"[S,T,Y]{1}[0-9]{1,2}\\(Phosp\\)")),"[1-9][0-9]{0,1}")
# tList2<-str_extract_all(paste(str_extract_all(DatAcet[,3],"[N]{1}[0-9]{1,2}\\(Deami\\)")),"[1-9][0-9]{0,1}")
# tList3<-str_extract_all(paste(str_extract_all(DatAcet[,3],"[K]{1}[0-9]{1,2}\\(Acetyl\\)")),"[1-9][0-9]{0,1}")
pattern <- "Phospho \\[[S,T,Y][0-9]{1,2}[S,T,Y,;, ,0-9]*\\]"
tList<-str_extract_all(paste(str_extract_all(DatAcet[,2],pattern)),"[1-9][0-9]{0,1}")
pattern <- "Deamidated \\[[N][0-9]{1,2}[N,;, ,0-9]*\\]"
tList2<-str_extract_all(paste(str_extract_all(DatAcet[,2],pattern)),"[1-9][0-9]{0,1}")
pattern <- "Acetylated \\[[K][0-9]{1,2}[K,;, ,0-9]*\\]"
tList3<-str_extract_all(paste(str_extract_all(DatAcet[,2],pattern)),"[1-9][0-9]{0,1}")
if (length(tList)>1 & length(tList2)>1 & length(tList3)>1) {
for (pep in 1:nrow(DatAcet)) {
ttList <- cbind(c(tList[[pep]],tList2[[pep]],tList3[[pep]]),
c(rep("ph",length(tList[[pep]])),rep("de",length(tList2[[pep]])),rep("ac",length(tList3[[pep]]))))
ttList <- ttList[order(as.numeric(ttList[,1])),]
if (length(ttList)>2) {
for (p in 1:nrow(ttList)) {
pos<-as.numeric(ttList[p,1])+(p-1)*2
DatAcet[pep,1]<-paste(substr(DatAcet[pep,1],1,pos),ttList[p,2],substr(DatAcet[pep,1],pos+1,nchar(DatAcet[pep,1])),sep="")
}
} else if (length(ttList)==2) {
pos<-as.numeric(ttList[1])
DatAcet[pep,1]<-paste(substr(DatAcet[pep,1],1,pos),ttList[2],substr(DatAcet[pep,1],pos+1,nchar(DatAcet[pep,1])),sep="")
}
}
}
DatAcet<-DatAcet[,c(1,3,4:ncol(DatAcet))]
# DatAcet<-rbind(DatAcet,Dat)
system.time(tDat<-VRollup(DatAcet[,3:ncol(DatAcet)],unlist(DatAcet[,1]),minPep=1,Mode="mean",ref=F,center=T))
DatAcet<-merge(tDat,DatAcet[,1:2],by.x=0,by.y=1)
DatAcet<-DatAcet[!duplicated(DatAcet[,1]),]
if(length(grep("ph",DatAcet[,1]))>0 | length(grep("de",DatAcet[,1]))>0 | length(grep("ac",DatAcet[,1]))>0) {
Dat<-DatAcet[-grep("ph|de|ac",DatAcet[,1]),]
} else {
Dat<-DatAcet
}
PepData[[i]]<-Dat
ModData[[i]]<-DatAcet[grep("ph|de|ac",DatAcet[,1]),]
system.time(ProtData[[i]]<-VRollup(Dat[,2:(1+NumCond)],Dat[,2+NumCond],minPep=1,Mode="mean",ref=F,center=T))
if (normProts)
ProtData[[i]] <- t(t(ProtData[[i]]) - apply(ProtData[[i]],2,median,na.rm=T))
if (normMods & nrow(ModData[[i]])>0)
ModData[[i]][,2:(NumCond+1)] <- t(t(ModData[[i]][,2:(NumCond+1)]) - apply(ModData[[i]][,2:(NumCond+1)],2,median,na.rm=T))
colnames(ProtData[[i]])<-paste("Cond",1:NumCond,"Rep",i)
colnames(PepData[[i]])<-c("sequence",paste(c(paste("Cond",1:NumCond),"accs"),"Rep",i))
colnames(ModData[[i]])<-c("sequence",paste(c(paste("Cond",1:NumCond),"accs"),"Rep",i))
}
par(mfrow=c(1,1))
# merging
Proteins<-merge(ProtData[[1]],ProtData[[2]],by=0,all=T)
Peptides<-merge(PepData[[1]],PepData[[2]],by=1,all=T)
Acet<-merge(ModData[[1]],ModData[[2]],by=1,all=T)
for (i in 3:NumReps){
Proteins<-merge(Proteins,ProtData[[i]],by.x=1,by.y=0,all=T)
Peptides<-merge(Peptides,PepData[[i]],by.x=1,by.y=1,all=T)
if (nrow(ModData[[i]])>0) {
Acet<-merge(Acet,ModData[[i]],by.x=1,all=T)
} else {
Acet<-cbind(Acet,NA,NA,NA,NA,NA,NA)
}
}
rownames(Proteins)<-Proteins[,1]
Proteins<-Proteins[rownames(Proteins)!="",2:ncol(Proteins)]
boxplot(Proteins)
rownames(Peptides)<-Peptides[,1]
Peptides<-Peptides[,c(rep(2:(1+NumCond),NumReps)+rep(seq(0,(NumCond+1)*NumReps-1,(NumCond+1)),
each=NumCond),seq(NumCond+2,NumReps*(NumCond+1)
+1,(NumCond+1)))]
boxplot(Peptides[1:(ncol(Peptides)-NumReps)])
rownames(Acet)<-Acet[,1]
Acet<-Acet[,c(rep(2:(1+NumCond),NumReps)+rep(seq(0,(NumCond+1)*NumReps-1,(NumCond+1)),
each=NumCond),seq(NumCond+2,NumReps*(NumCond+1)
+1,(NumCond+1)))]
for (r in 1:nrow(Acet)) {
tt<-Acet[r,(NumCond*NumReps+1):(NumCond*NumReps+NumReps)]
Acet[r,NumCond*NumReps+1]<-unique(tt[!is.na(tt)])[1]
}
Acet<-Acet[,1:(NumCond*NumReps+1)]
for (r in 1:nrow(Peptides)) {
tt<-Peptides[r,(NumCond*NumReps+1):(NumCond*NumReps+NumReps)]
Peptides[r,NumCond*NumReps+1]<-unique(tt[!is.na(tt)])[1]
}
Peptides<-Peptides[,1:(NumCond*NumReps+1)]
boxplot(Acet[,1:(NumReps*NumCond)])
write.csv(Peptides, paste(Experiment, "AllPeptides.csv",sep=""))
print(paste("Number of Proteins:",nrow(Proteins)))
print(paste("Number of modPeptides:",nrow(Acet)))
Data<-Proteins
colnames(Acet)[1:(ncol(Acet)-1)]<-colnames(Proteins)
# Data<-Acet[,1:(ncol(Acet)-1)]
Reps<-rep(1:NumCond,NumReps)
write.csv(Acet,paste(Experiment,"AllMods.csv",sep=""))
write.csv(Proteins,paste(Experiment,"AllProteins.csv",sep=""))
# PCA
if(sum(complete.cases(Data))>1) {
pca<-prcomp(t(Data[complete.cases(Data),]),scale=T,retx=T)
plot((pca))
scores <- pca$x
loadings <- pca$rotation
plot(scores,col=Reps+1,pch=19)
}
text(scores,colnames(Data))
## significance analysis
# compare against 114
source("../LimmaRankProd.R")
RR<-rbind(rep(RR,NumReps),rep(Against,NumReps))
RR[1,] <- RR[1,] + rep(0:(NumReps-1)*NumCond,each=NumComp)
RR[2,] <- RR[2,] + rep(0:(NumReps-1)*NumCond,each=NumComp)
MAData<-AVData<-NULL
for (i in 1:ncol(RR)) {
MAData<-cbind(MAData,Data[,RR[1,i]]-Data[,RR[2,i]])
AVData<-cbind(AVData,Data[,RR[1,i]]+Data[,RR[2,i]])
}
rownames(MAData)<-rownames(Data)
MAReps<-rep(1:NumComp,NumReps)
## lowess normalization
if (LOWESS) {
for (c in 1:ncol(MAData)) {
MAData<-MAData[order(AVData[,c]),]
AVData<-AVData[order(AVData[,c]),]
plot(AVData[,c],MAData[,c],cex=0.2)
MAData[!is.na(MAData[,c]),c]<-MAData[!is.na(MAData[,c]),c]-lowess(AVData[!is.na(AVData[,c]),c],MAData[!is.na(MAData[,c]),c])$y
points(AVData[,c],MAData[,c],cex=0.2,col=2)
}
}
qvalues<-LimmaRankProd(MAData,MAReps)
Reg1 <- sapply(qvalues,function(x) sum(x[,2] < qlim | x[,3] < qlim, na.rm=T))
AllHiLo<-NULL
LogRatios<-matrix(NA,nrow(MAData),NumComp,dimnames=list(rows=rownames(MAData),cols=1:NumComp))
WhereReg<-matrix(F,nrow(MAData),NumComp,dimnames=list(rownames(MAData),paste("T",RR[1,1:NumComp],"vsT",RR[2,1:NumComp],sep="")))
Pvalue<-matrix(NA,nrow(MAData),NumComp,dimnames=list(rownames(MAData),paste("T",RR[1,1:NumComp],"vsT",RR[2,1:NumComp],sep="")))
for (c in 1:NumComp) {
HiLoList<-(qvalues[[c]])[!is.na(qvalues[[c]][,2]) & !is.na(qvalues[[c]][,3]) & (qvalues[[c]][,2]<qlim | qvalues[[c]][,3] < qlim),]
HiLoList<-HiLoList[order(HiLoList[,4]),]
LogRatios[rownames(qvalues[[c]]),c]<-qvalues[[c]][,4]
Pvalue[rownames(qvalues[[c]]),c]<-rowMins(cbind(qvalues[[c]][,2],qvalues[[c]][,3]),na.rm=T)
colnames(HiLoList)<-c("t-test","limma","rank products","log2 change")
AllHiLo<-c(AllHiLo,rownames(HiLoList))
WhereReg[rownames(HiLoList),c]<-T
}
FullReg<-merge(LogRatios,Pvalue,by.x=0,by.y=0)
rownames(FullReg)<-FullReg[,1]
FullReg<-FullReg[,2:ncol(FullReg)]
colnames(FullReg)<-c(paste(colnames(WhereReg),"mean log-ratio"),paste(colnames(WhereReg),"p-value (min(limma,rank products)"))
write.csv(FullReg,paste(Experiment,"RegulatedProteins.csv",sep=""))
## modified peptides, not protein-normalized
Data<-Acet[,1:(ncol(Acet)-1)]
Reps<-rep(1:NumCond,NumReps)
dim(Acet)
# PCA
if(sum(complete.cases(Data))>1) {
pca<-prcomp(t(Data[complete.cases(Data),]),scale=T,retx=T)
plot((pca))
scores <- pca$x
loadings <- pca$rotation
plot(scores,col=Reps+1,pch=19)
}
text(scores,colnames(Data))
source("../LimmaRankProd.R")
## particular setup for ratios
MAData<-AVData<-NULL
for (i in 1:ncol(RR)) {
MAData<-cbind(MAData,Data[,RR[1,i]]-Data[,RR[2,i]])
AVData<-cbind(AVData,Data[,RR[1,i]]+Data[,RR[2,i]])
}
rownames(MAData)<-rownames(Data)
MAReps<-rep(1:NumComp,NumReps)
## lowess normalization
if (LOWESS) {
for (c in 1:ncol(MAData)) {
MAData<-MAData[order(AVData[,c]),]
AVData<-AVData[order(AVData[,c]),]
plot(AVData[,c],MAData[,c],cex=0.2)
MAData[!is.na(MAData[,c]),c]<-MAData[!is.na(MAData[,c]),c]-lowess(AVData[!is.na(AVData[,c]),c],MAData[!is.na(MAData[,c]),c])$y
points(AVData[,c],MAData[,c],cex=0.2,col=2)
}
}
qvalues<-LimmaRankProd(MAData,MAReps)
Reg2 <- sapply(qvalues,function(x) sum(x[,2] < qlim | x[,3] < qlim, na.rm=T))
AllHiLo<-NULL
LogRatios<-matrix(NA,nrow(MAData),NumComp,dimnames=list(rows=rownames(MAData),cols=1:NumComp))
WhereReg2<-matrix(F,nrow(MAData),NumComp,dimnames=list(rownames(MAData),paste("T",RR[1,1:NumComp],"vsT",RR[2,1:NumComp],sep="")))
Pvalue<-matrix(NA,nrow(MAData),NumComp,dimnames=list(rownames(MAData),paste("T",RR[1,1:NumComp],"vsT",RR[2,1:NumComp],sep="")))
for (c in 1:NumComp) {
HiLoList<-(qvalues[[c]])[!is.na(qvalues[[c]][,2]) & !is.na(qvalues[[c]][,3]) & (qvalues[[c]][,2]<qlim | qvalues[[c]][,3] < qlim),]
HiLoList<-HiLoList[order(HiLoList[,4]),]
LogRatios[rownames(qvalues[[c]]),c]<-qvalues[[c]][,4]
Pvalue[rownames(qvalues[[c]]),c]<-rowMins(cbind(qvalues[[c]][,2],qvalues[[c]][,3]),na.rm=T)
colnames(HiLoList)<-c("t-test","limma","rank products","log2 change")
AllHiLo<-c(AllHiLo,rownames(HiLoList))
WhereReg2[rownames(HiLoList),c]<-T
}
FullReg<-merge(LogRatios,Pvalue,by.x=0,by.y=0)
FullReg<-merge(FullReg,cbind(rownames(Acet),Acet[,ncol(Acet)]),by=1)
rownames(FullReg)<-FullReg[,1]
FullReg<-FullReg[,2:ncol(FullReg)]
colnames(FullReg)<-c(paste(colnames(WhereReg2),"mean log-ratio"),paste(colnames(WhereReg2),"p-value (min(limma,rank products)"))
write.csv(FullReg,paste(Experiment,"RegulatedMod.csv"))
## all proteins having a PTM site found
ttt<-rownames(Acet)
CommonListAll<-c(unique(Acet[,NumCond*NumReps+1]),rownames(Proteins))
CommonListAll<-CommonListAll[duplicated(CommonListAll)]
ProtAcFullList<-NULL
AcetProtNormed<-NULL
for (prot in CommonListAll) {
tProt<-t(Proteins[prot,])
tAcPep<-t(Acet[Acet[,NumCond*NumReps+1]==prot,1:(NumCond*NumReps)])
tAll<-unlist(c(tProt,tAcPep))
# normalize ac-peptides with protein abundances
if(!is.null(dim(tAcPep))) {
ProtAcFullList<-rbind(ProtAcFullList,cbind((rep(prot,ncol(tAcPep))),(colnames(tAcPep))))
for (pep in colnames(tAcPep)) {
AcetProtNormed<-rbind(AcetProtNormed,t(tAcPep[,pep]-tProt))
rownames(AcetProtNormed)[nrow(AcetProtNormed)]<-pep
}
} else {
ProtAcFullList<-rbind(ProtAcFullList,c(prot,names(tAcPep)))
AcetProtNormed<-rbind(AcetProtNormed,t(tAcPep-tProt))
rownames(AcetProtNormed)[nrow(AcetProtNormed)]<-pep
}
}
AcetProtNormedC<-merge(AcetProtNormed,Acet[,c(NumCond*NumReps+1,1)],by=0)[,1:(NumCond*NumReps+2)]
write.csv(AcetProtNormedC,paste(Experiment,"AllNormedMods.csv"))
head(AcetProtNormed)
boxplot(AcetProtNormed)
# check for regulations
# compare against 115
## number of ph-sites is too low for this kind of analysis
Data<-AcetProtNormed
# PCA
if(sum(complete.cases(Data))>1) {
pca<-prcomp(t(Data[complete.cases(Data),]),scale=T,retx=T)
plot((pca))
scores <- pca$x
loadings <- pca$rotation
plot(scores,col=Reps+1,pch=19)
}
text(scores,colnames(Data))
MAData<-AVData<-NULL
for (i in 1:ncol(RR)) {
MAData<-cbind(MAData,Data[,RR[1,i]]-Data[,RR[2,i]])
AVData<-cbind(AVData,Data[,RR[1,i]]+Data[,RR[2,i]])
}
rownames(MAData)<-rownames(Data)
MAReps<-rep(1:NumComp,NumReps)
## lowess normalization
if (LOWESS) {
for (c in 1:ncol(MAData)) {
MAData<-MAData[order(AVData[,c]),]
AVData<-AVData[order(AVData[,c]),]
plot(AVData[,c],MAData[,c],cex=0.2)
MAData[!is.na(MAData[,c]),c]<-MAData[!is.na(MAData[,c]),c]-lowess(AVData[!is.na(AVData[,c]),c],MAData[!is.na(MAData[,c]),c])$y
points(AVData[,c],MAData[,c],cex=0.2,col=2)
}
}
qvalues<-LimmaRankProd(MAData,MAReps)
Reg3 <- sapply(qvalues,function(x) sum(x[,2] < qlim | x[,3] < qlim, na.rm=T))
Reg1
Reg2
Reg3
AllHiLo<-NULL
LogRatios<-matrix(NA,nrow(MAData),NumComp,dimnames=list(rows=rownames(MAData),cols=1:NumComp))
WhereRegMods<-matrix(F,nrow(MAData),NumComp,dimnames=list(rownames(MAData),paste("T",RR[1,1:NumComp],"vsT",RR[2,1:NumComp],sep="")))
PvalueMods<-matrix(NA,nrow(MAData),NumComp,dimnames=list(rownames(MAData),paste("T",RR[1,1:NumComp],"vsT",RR[2,1:NumComp],sep="")))
for (c in 1:NumComp) {
HiLoList<-(qvalues[[c]])[!is.na(qvalues[[c]][,2]) & !is.na(qvalues[[c]][,3]) & (qvalues[[c]][,2]<qlim | qvalues[[c]][,3] < qlim),]
HiLoList<-HiLoList[order(HiLoList[,4]),]
LogRatios[rownames(qvalues[[c]]),c]<-qvalues[[c]][,4]
PvalueMods[rownames(qvalues[[c]]),c]<-rowMins(cbind(qvalues[[c]][,2],qvalues[[c]][,3]),na.rm=T)
colnames(HiLoList)<-c("t-test","limma","rank products","log2 change")
AllHiLo<-c(AllHiLo,rownames(HiLoList))
WhereRegMods[rownames(HiLoList),c]<-T
}
FullReg<-merge(LogRatios,PvalueMods,by.x=0,by.y=0)
FullReg<-merge(FullReg,cbind(rownames(Acet),Acet[,ncol(Acet)]),by=1)
rownames(FullReg)<-FullReg[,1]
FullReg<-FullReg[,2:ncol(FullReg)]
colnames(FullReg)<-c(paste(colnames(WhereRegMods),"mean log-ratio"),paste(colnames(WhereRegMods),"p-value (min(limma,rank products)"),"acc")
write.csv(FullReg,paste(Experiment,"RegulatedProtNormedModPept.csv"))
CommonList<-unique(FullReg[rownames(HiLoList),ncol(FullReg)])
## Compare ac-peptide with protein and related peptide for found regulations
pdf(paste(Experiment,"CompNormedPhosProt.pdf"))
par(mfrow=c(2,2),mar=c(3.5,3.5,2.0,2.0),family="sans",font=3,font.lab=4,font.axis=1,mgp=c(1.85,0.7,0))
AcList<-rownames(HiLoList)
PList<-FullReg[rownames(HiLoList),ncol(FullReg)]
for (i in 1:length(PList)) {
print(AcList[i])
PepNames<-rownames(Peptides[Peptides[,NumCond*NumReps+1]==PList[i] & !is.na(Peptides[,NumCond*NumReps+1]),])
if (length(PepNames)>0) {
print(PepNames)
CList<-unique(unlist(sapply(gsub("ph|ac|de","",AcList[i]),agrep,PepNames,value=T)))
ProtChange<-t(matrix(as.numeric(Proteins[as.character(PList[i]),]),NumCond))
#   ProtChange<-ProtChange-ProtChange[,2]
PepChange<-Peptides[CList,]
AcetChange<-Acet[AcList[i],]
maxGr<-max(unlist(c(ProtChange,PepChange[,1:(NumCond*NumReps)],AcetChange[,1:(NumCond*NumReps)])),na.rm=T)
minGr<-min(unlist(c(ProtChange,PepChange[,1:(NumCond*NumReps)],AcetChange[,1:(NumCond*NumReps)])),na.rm=T)
ngraphs<-sqrt(length(CList)+1+nrow(AcetChange))
par(mfrow=c(round(ngraphs),ceiling(ngraphs)))
#   minGr <- -0.75*(maxGr-minGr)
#   maxGr <- -minGr
plotCI(1:NumCond,colMeans(ProtChange,na.rm=T),uiw=colSds(ProtChange,na.rm=T),add=F,type="l",lwd=2,
ylim=c(minGr,maxGr),pch=NA,main=PList[i],ylab="Expression change",xlab="Diet",xaxt="no")
axis(1,1:NumCond,CondOrder[,1])
if(length(CList)>0) {
for (pep in 1:nrow(PepChange)) {
tPepCh<-t(matrix(as.numeric(PepChange[pep,1:(NumCond*NumReps)]),NumCond))
#     tPepCh<-tPepCh-tPepCh[,2]
plotCI(1:NumCond,colMeans(tPepCh,na.rm=T),uiw=colSds(tPepCh,na.rm=T),ylim=c(minGr,maxGr),col=2,type="l",
lwd=2,main=rownames(PepChange)[pep],xlab="",xaxt="no",ylab="")
axis(1,1:NumCond,c("0 min","5 min","10 min","30 min","2 h","4 h"))
points(1:NumCond,colMeans(tPepCh,na.rm=T),col=2,pch=14+pep)
}
}
#   legend(2,maxGr,rownames(PepChange),col=2,lwd=1,pch=14+1:nrow(PepChange))
for (pep in 1:nrow(AcetChange)) {
tPepCh<-t(matrix(as.numeric(AcetChange[pep,1:(NumCond*NumReps)]),NumCond))
#     tPepCh<-tPepCh-tPepCh[,2]
plotCI(1:NumCond,colMeans(tPepCh,na.rm=T),uiw=colSds(tPepCh,na.rm=T),ylim=c(minGr,maxGr),col=3,type="l",
lwd=2,main=rownames(AcetChange)[pep],xlab="",xaxt="no",ylab="")
axis(1,1:NumCond,c("0 min","5 min","10 min","30 min","2 h","4 h"))
points(1:NumCond,colMeans(tPepCh,na.rm=T),col=3,pch=14+pep)
}
#   legend(2,maxGr/2,rownames(AcetChange),col=3,lwd=1,pch=14+1:nrow(AcetChange))
#     Sys.sleep(10)
}
}
par(mfrow=c(1,1))
dev.off()
shiny::runApp('~/devel/Proteomics/DataAnalysis/ShinyApps/PolySTest')
runApp('~/devel/Proteomics/DataAnalysis/ShinyApps/PolySTest')
runApp('~/devel/Proteomics/DataAnalysis/ShinyApps/PolySTest')
runApp('~/devel/Proteomics/DataAnalysis/ShinyApps/PolySTest')
runApp('~/devel/Proteomics/DataAnalysis/ShinyApps/PolySTest')
runApp('~/devel/Proteomics/DataAnalysis/ShinyApps/PolySTest')
runApp('~/devel/Proteomics/DataAnalysis/ShinyApps/PolySTest')
runApp('~/devel/Proteomics/DataAnalysis/ShinyApps/PolySTest')
runApp('~/devel/Proteomics/DataAnalysis/ShinyApps/PolySTest')
runApp('~/devel/Proteomics/DataAnalysis/ShinyApps/PolySTest')
plot(1:10)
grid()
grid(NULL,NULL)
plot(1:10)
grid(NULL,NULL)
grid(NULL,NULL,lty=6)
plot(1:10)
plot(1:10)
grid(NULL,NULL,lty=6)
grid(NULL,NULL,lty=1)
grid(NULL,NA,lty=1)
plot(1:10)
grid(NULL,NA,lty=1)
grid(NULL,NA,lwd=1)
grid(NULL,NA,lwd=1,col=1)
