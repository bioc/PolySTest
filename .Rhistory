source('~/devel/Bioinformatics/DataAnalysis/ShinyApps/PolySTest/runPolySTest.R')
setwd("~/devel/Bioinformatics/DataAnalysis/ShinyApps/PolySTest")
libary(yaml)
library(yaml)
?yaml
?any
?stop
colnames(allComps) <- paste("Comparison", 1:ncol(allComps))
?Sys.getenv
?txtProgressBar
?Sys.setenv
#### simple script to read Proline result files and set the parameter values for PolySTest
#!/usr/bin/env Rscript
library(readxl)
#### simple script to read Proline result files and set the parameter values for PolySTest
library(readxl)
A <- read.csv("~/devel/Bioinformatics/ELIXIR_EDAM/IS_Benchmarking/Proline/Results/proteins")
A <- read.csv("~/devel/Bioinformatics/ELIXIR_EDAM/IS_Benchmarking/Proline/Results/proteins.csv")
View(A)
colnames(proteins)
colnames(A
)
A <- read.csv("~/devel/Bioinformatics/ELIXIR_EDAM/IS_Benchmarking/Proline/Results/proteins.csv")
colnames(A
)
?yaml::write_yaml
c(1:10)
as.yaml(as.character(1:10))
library(yaml)
as.yaml(as.character(1:10))
as.yaml(as.vector(as.character(1:10)))
as.yaml(1:10)
as.yaml(list(a=1:2, b=3:4), omap=TRUE)
sample()
NumCond <- 4
NumReps <- 3
rep(0:(NumCond-1),NumReps)
rep(0:(NumCond-1),NumReps)*NumReps
rep(0:(NumCond-1),NumReps)*NumReps+rep(1:(NumReps), each=NumCond)
0:(NumCond-1)
0:(NumCond-1)*NumReps
0:(NumCond-1)*NumReps+1
0:(NumReps-1)*NumCond+1
0:(NumReps-1)*NumCond+2
0:(NumReps-1)*NumCond+3
comsub<-function(x) {
# sort the vector
x<-sort(x)
# split the first and last element by character
d_x<-strsplit(x[c(1,length(x))],"")
# search for the first not common element and so, get the last matching one
der_com<-match(FALSE,do.call("==",d_x))-1
# if there is no matching element, return an empty vector, else return the common part
ifelse(der_com==0,return(character(0)),return(substr(x[1],1,der_com)))
}
comsub(c("dsfasdBALAdsdf", "gksdfBALAd", "sdfgsdBALA"))
comsub(c("dsfasdBALAdsdf", "gksdfBALAd", "sdfgsdBALA"))
library(Biostrings)
library(qualV)
library(qualV)
?LCS
LCS( "gksdfBALAd", "sdfgsdBALA")
LCS( "gksdfBALAd", "sdfgsdBALA")
LCS( c("gksdfBALAd", "sdfgsdBALA"))
x <- LCS( "gksdfBALAd", "sdfgsdBALA")
x
strsplit("DGSDF","")
x <- LCS(strsplit( "gksdfBALAd",""), strsplit("sdfgsdBALA", ""))
x <- LCS(strsplit( unlist("gksdfBALAd","")), unlist(strsplit("sdfgsdBALA", "")))
x <- LCS(unlist(strsplit("gksdfBALAd","")), unlist(strsplit("sdfgsdBALA", "")))
x
library(stringi)
library(stringdist)
a <- "hello"
b <- "hel123l5678o"
## get all forward substrings of 'b'
sb <- stri_sub(b, 1, 1:nchar(b))
## extract them from 'a' if they exist
sstr <- na.omit(stri_extract_all_coll(a, sb, simplify=TRUE))
## match the longest one
sstr[which.max(nchar(sstr))]
# [1] "hel"
L <- matrix(0, length(A), length(B))
ones <- which(outer(A, B, "=="), arr.ind = TRUE)
ones <- ones[order(ones[, 1]), ]
for(i in 1:nrow(ones)) {
v <- ones[i, , drop = FALSE]
L[v] <- ifelse(any(v == 1), 1, L[v - 1] + 1)
}
paste0(A[(-max(L) + 1):0 + which(L == max(L), arr.ind = TRUE)[1]], collapse = "")
# [1] "DUISBURG"
A <- strsplit("afBLaBasdf","")[[1]]
B <- strsplit("jhkiBLaBdsdf","")[[1]]
L <- matrix(0, length(A), length(B))
ones <- which(outer(A, B, "=="), arr.ind = TRUE)
ones <- ones[order(ones[, 1]), ]
for(i in 1:nrow(ones)) {
v <- ones[i, , drop = FALSE]
L[v] <- ifelse(any(v == 1), 1, L[v - 1] + 1)
}
paste0(A[(-max(L) + 1):0 + which(L == max(L), arr.ind = TRUE)[1]], collapse = "")
# [1] "DUISBURG"
lcs <- function(a,b) {
A <- strsplit(a, "")[[1]]
B <- strsplit(b, "")[[1]]
L <- matrix(0, length(A), length(B))
ones <- which(outer(A, B, "=="), arr.ind = TRUE)
ones <- ones[order(ones[, 1]), ]
for(i in 1:nrow(ones)) {
v <- ones[i, , drop = FALSE]
L[v] <- ifelse(any(v == 1), 1, L[v - 1] + 1)
}
paste0(A[(-max(L) + 1):0 + which(L == max(L), arr.ind = TRUE)[1]], collapse = "")
}
lcs("gsdfgtyysdd","dfsgsdfgtyysdfgsfdhssdfhsdh")
lcs("gsdfgtyysdd","dfsgsdftyysdfgsfdhssdfhsdh")
proteins
lcs("sdfgsdfgastyyfhh","gsdfgtyysdd","dfsgsdftyysdfgsfdhssdfhsdh")
lll <- list("sdfgsdfgastyyfhh","gsdfgtyysdd","dfsgsdftyysdfgsfdhssdfhsdh")
do.call(lcs, lll)
?mapply
mapply(lcs, lll, lll)
0:(NumCond-1)*NumReps+i
i
i <- 2
i
0:(NumCond-1)*NumReps+i
NumReps
NumCond
0:(NumReps-1)*NumCond+i
lcs("sdfgsd","a")
lcs("sdfgsd","ad")
length("")
length("a")
## setting conditions names to common name of column names if there is any
# function to calculated "longest common substring" of 2 strings (from   https://stackoverflow.com/questions/35381180/identify-a-common-pattern)
lcs <- function(a,b) {
A <- strsplit(a, "")[[1]]
B <- strsplit(b, "")[[1]]
L <- matrix(0, length(A), length(B))
ones <- which(outer(A, B, "=="), arr.ind = TRUE)
ones <- ones[order(ones[, 1]), ]
print(ones)
for(i in 1:nrow(ones)) {
v <- ones[i, , drop = FALSE]
L[v] <- ifelse(any(v == 1), 1, L[v - 1] + 1)
}
paste0(A[(-max(L) + 1):0 + which(L == max(L), arr.ind = TRUE)[1]], collapse = "")
}
length("a")
lcs("sdfgsd","ad")
lcs("sdfgsd","a")
## setting conditions names to common name of column names if there is any
# function to calculated "longest common substring" of 2 strings (from   https://stackoverflow.com/questions/35381180/identify-a-common-pattern)
lcs <- function(a,b) {
A <- strsplit(a, "")[[1]]
B <- strsplit(b, "")[[1]]
L <- matrix(0, length(A), length(B))
ones <- which(outer(A, B, "=="), arr.ind = TRUE)
ones <- ones[order(ones[, 1]), ]
if(length(ones) > 0) {
for(i in 1:nrow(ones)) {
v <- ones[i, , drop = FALSE]
L[v] <- ifelse(any(v == 1), 1, L[v - 1] + 1)
}
paste0(A[(-max(L) + 1):0 + which(L == max(L), arr.ind = TRUE)[1]], collapse = "")
} else {
return(NA)
}
}
lcs("sdfgsd","a")
lcs("sdfgsd","af")
## setting conditions names to common name of column names if there is any
# function to calculated "longest common substring" of 2 strings (from   https://stackoverflow.com/questions/35381180/identify-a-common-pattern)
lcs <- function(a,b) {
A <- strsplit(a, "")[[1]]
B <- strsplit(b, "")[[1]]
L <- matrix(0, length(A), length(B))
ones <- which(outer(A, B, "=="), arr.ind = TRUE)
ones <- ones[order(ones[, 1]), ]
if(nrow(ones) > 0) {
for(i in 1:nrow(ones)) {
v <- ones[i, , drop = FALSE]
L[v] <- ifelse(any(v == 1), 1, L[v - 1] + 1)
}
paste0(A[(-max(L) + 1):0 + which(L == max(L), arr.ind = TRUE)[1]], collapse = "")
} else {
return(NA)
}
}
lcs("sdfgsd","af")
## setting conditions names to common name of column names if there is any
# function to calculated "longest common substring" of 2 strings (from   https://stackoverflow.com/questions/35381180/identify-a-common-pattern)
lcs <- function(a,b) {
A <- strsplit(a, "")[[1]]
B <- strsplit(b, "")[[1]]
L <- matrix(0, length(A), length(B))
ones <- which(outer(A, B, "=="), arr.ind = TRUE)
ones <- ones[order(ones[, 1]), ]
print(ones)
if(nrow(ones) > 0) {
for(i in 1:nrow(ones)) {
v <- ones[i, , drop = FALSE]
L[v] <- ifelse(any(v == 1), 1, L[v - 1] + 1)
}
paste0(A[(-max(L) + 1):0 + which(L == max(L), arr.ind = TRUE)[1]], collapse = "")
} else {
return(NA)
}
}
lcs("sdfgsd","af")
## setting conditions names to common name of column names if there is any
# function to calculated "longest common substring" of 2 strings (from   https://stackoverflow.com/questions/35381180/identify-a-common-pattern)
lcs <- function(a,b) {
A <- strsplit(a, "")[[1]]
B <- strsplit(b, "")[[1]]
L <- matrix(0, length(A), length(B))
ones <- which(outer(A, B, "=="), arr.ind = TRUE)
ones <- ones[order(ones[, 1]), ]
print(nrow(ones))
if(nrow(ones) > 0) {
for(i in 1:nrow(ones)) {
v <- ones[i, , drop = FALSE]
L[v] <- ifelse(any(v == 1), 1, L[v - 1] + 1)
}
paste0(A[(-max(L) + 1):0 + which(L == max(L), arr.ind = TRUE)[1]], collapse = "")
} else {
return(NA)
}
}
lcs("sdfgsd","af")
## setting conditions names to common name of column names if there is any
# function to calculated "longest common substring" of 2 strings (from   https://stackoverflow.com/questions/35381180/identify-a-common-pattern)
lcs <- function(a,b) {
A <- strsplit(a, "")[[1]]
B <- strsplit(b, "")[[1]]
L <- matrix(0, length(A), length(B))
ones <- which(outer(A, B, "=="), arr.ind = TRUE)
ones <- ones[order(ones[, 1]), , drop=F]
print(nrow(ones))
if(nrow(ones) > 0) {
for(i in 1:nrow(ones)) {
v <- ones[i, , drop = FALSE]
L[v] <- ifelse(any(v == 1), 1, L[v - 1] + 1)
}
paste0(A[(-max(L) + 1):0 + which(L == max(L), arr.ind = TRUE)[1]], collapse = "")
} else {
return(NA)
}
}
lcs("sdfgsd","af")
lcs("sdfgsd","a")
